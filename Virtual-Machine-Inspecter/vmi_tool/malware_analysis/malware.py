import os
import hashlib

class MalwareDetection:
    def __init__(self, known_malware_hashes=None, suspicious_extensions=None):
        """
        Initialize the malware detection system.
        :param known_malware_hashes: A set of known malware hashes for comparison.
        :param suspicious_extensions: A set of suspicious file extensions for additional checks.
        """
        self.known_malware_hashes = known_malware_hashes if known_malware_hashes else set()
        self.suspicious_extensions = suspicious_extensions if suspicious_extensions else {'.exe', '.bat', '.dll', '.scr', '.vbs'}

    def get_file_hash(self, file_path):
        """
        Generate the hash of a file using SHA256.
        :param file_path: Path to the file to be hashed.
        :return: SHA256 hash of the file.
        """
        hash_sha256 = hashlib.sha256()
        try:
            with open(file_path, 'rb') as f:
                while chunk := f.read(8192):  # Read in chunks of 8k
                    hash_sha256.update(chunk)
            return hash_sha256.hexdigest()
        except Exception as e:
            print(f"Error reading file {file_path}: {e}")
            return None

    def check_suspicious_extensions(self, file_path):
        """
        Check if the file has a suspicious extension.
        :param file_path: Path to the file.
        :return: True if the file has a suspicious extension.
        """
        _, extension = os.path.splitext(file_path)
        return extension.lower() in self.suspicious_extensions

    def scan_directory_for_malware(self, directory):
        """
        Scan a directory for suspicious files based on file extensions, hashes, and behavior.
        :param directory: Directory to scan for malware.
        :return: List of suspicious files found in the directory.
        """
        suspicious_files = []
        for root, dirs, files in os.walk(directory):
            for file in files:
                file_path = os.path.join(root, file)
                file_hash = self.get_file_hash(file_path)
                if file_hash and file_hash in self.known_malware_hashes:
                    suspicious_files.append(file_path)
                elif self.check_suspicious_extensions(file_path):
                    suspicious_files.append(file_path)
                # Add further checks for file behavior or signature analysis here
        return suspicious_files

    def detect_malware(self, directory):
        """
        Detect malware in a directory by checking for known malware hashes and suspicious extensions.
        :param directory: Directory to scan for malware.
        :return: List of suspicious files detected.
        """
        print(f"Scanning directory {directory} for malware...")

        # Step 1: Scan the given directory for suspicious files
        suspicious_files = self.scan_directory_for_malware(directory)

        # Step 2: Report the results
        if suspicious_files:
            print("Malware detected in the following files:")
            for file in suspicious_files:
                print(f"Suspicious file: {file}")
        else:
            print("No malware detected.")
        return suspicious_files

    def get_running_processes(self):
      """
      Get a list of running processes with their PID and name.
      :return: List of dictionaries containing process PID and name.
       """
      processes = []
      try:
        for proc in psutil.process_iter(['pid', 'name']):
            processes.append({"pid": proc.info['pid'], "name": proc.info['name']})
      except Exception as e:
        print(f"Error retrieving running processes: {e}")
      return processes


    def check_file_integrity(self, directory, known_good_hashes):
     """
     Verify the integrity of files in a directory by comparing their hashes 
     against a list of known good hashes.
     :param directory: Directory containing files to check.
     :param known_good_hashes: Dictionary with file paths as keys and their expected hashes as values.
     :return: Dictionary summarizing the integrity check results.
     """
     integrity_issues = []
     for file_path, expected_hash in known_good_hashes.items():
        current_hash = self.get_file_hash(file_path)
        if current_hash != expected_hash:
            integrity_issues.append(file_path)
    
     if integrity_issues:
        return {"status": "Issues Found", "message": "File integrity issues detected.", "details": integrity_issues}
     else:
        return {"status": "Good", "message": "All files passed the integrity check."}

